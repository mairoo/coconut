package kr.pincoin.api.domain.order.model

import kr.pincoin.api.domain.order.enums.OrderCurrency
import kr.pincoin.api.domain.order.enums.OrderPaymentMethod
import kr.pincoin.api.domain.order.enums.OrderStatus
import kr.pincoin.api.domain.order.enums.OrderVisible
import java.math.BigDecimal
import java.time.LocalDateTime
import java.util.*

class Order private constructor(
    val id: Long? = null,
    val created: LocalDateTime? = null,
    val modified: LocalDateTime? = null,
    val isRemoved: Boolean = false,
    val orderNo: UUID = UUID.randomUUID(),
    val userAgent: String = "",
    val acceptLanguage: String = "",
    val ipAddress: String,
    val paymentMethod: OrderPaymentMethod = OrderPaymentMethod.BANK_TRANSFER,
    val status: OrderStatus = OrderStatus.PAYMENT_PENDING,
    val totalListPrice: BigDecimal = BigDecimal.ZERO,
    val totalSellingPrice: BigDecimal = BigDecimal.ZERO,
    val currency: OrderCurrency = OrderCurrency.KRW,
    val message: String = "",
    val parentId: Long? = null,
    val userId: Int? = null,
    val fullname: String,
    val transactionId: String = "",
    val visible: OrderVisible = OrderVisible.VISIBLE,
    val suspicious: Boolean = false,
) {
    private fun copy(
        isRemoved: Boolean = this.isRemoved,
        orderNo: UUID = this.orderNo,
        userAgent: String = this.userAgent,
        acceptLanguage: String = this.acceptLanguage,
        ipAddress: String = this.ipAddress,
        paymentMethod: OrderPaymentMethod = this.paymentMethod,
        status: OrderStatus = this.status,
        totalListPrice: BigDecimal = this.totalListPrice,
        totalSellingPrice: BigDecimal = this.totalSellingPrice,
        currency: OrderCurrency = this.currency,
        message: String = this.message,
        parentId: Long? = this.parentId,
        userId: Int? = this.userId,
        fullname: String = this.fullname,
        transactionId: String = this.transactionId,
        visible: OrderVisible = this.visible,
        suspicious: Boolean = this.suspicious,
    ): Order = Order(
        id = this.id,
        created = this.created,
        modified = this.modified,
        isRemoved = isRemoved,
        orderNo = orderNo,
        userAgent = userAgent,
        acceptLanguage = acceptLanguage,
        ipAddress = ipAddress,
        paymentMethod = paymentMethod,
        status = status,
        totalListPrice = totalListPrice,
        totalSellingPrice = totalSellingPrice,
        currency = currency,
        message = message,
        parentId = parentId,
        userId = userId,
        fullname = fullname,
        transactionId = transactionId,
        visible = visible,
        suspicious = suspicious,
    )

    companion object {
        fun of(
            id: Long? = null,
            created: LocalDateTime? = null,
            modified: LocalDateTime? = null,
            isRemoved: Boolean = false,
            orderNo: UUID = UUID.randomUUID(),
            userAgent: String = "",
            acceptLanguage: String = "",
            ipAddress: String,
            paymentMethod: OrderPaymentMethod = OrderPaymentMethod.BANK_TRANSFER,
            status: OrderStatus = OrderStatus.PAYMENT_PENDING,
            totalListPrice: BigDecimal = BigDecimal.ZERO,
            totalSellingPrice: BigDecimal = BigDecimal.ZERO,
            currency: OrderCurrency = OrderCurrency.KRW,
            message: String = "",
            parentId: Long? = null,
            userId: Int? = null,
            fullname: String,
            transactionId: String = "",
            visible: OrderVisible = OrderVisible.VISIBLE,
            suspicious: Boolean = false,
        ): Order = Order(
            id = id,
            created = created,
            modified = modified,
            isRemoved = isRemoved,
            orderNo = orderNo,
            userAgent = userAgent,
            acceptLanguage = acceptLanguage,
            ipAddress = ipAddress,
            paymentMethod = paymentMethod,
            status = status,
            totalListPrice = totalListPrice,
            totalSellingPrice = totalSellingPrice,
            currency = currency,
            message = message,
            parentId = parentId,
            userId = userId,
            fullname = fullname,
            transactionId = transactionId,
            visible = visible,
            suspicious = suspicious,
        )
    }
}